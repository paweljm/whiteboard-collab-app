{"version":3,"sources":["components/board/Board.js","components/container/Container.js","App.js","reportWebVitals.js","index.js"],"names":["socket","io","Board","useState","mouseDown","setMouseDown","mousePos","setMousePos","useEffect","canvas","document","getElementById","ctx","getContext","fillStyle","lineJoin","lineWidth","onmousedown","e","beginPath","emit","x","y","onmouseup","on","moveTo","console","log","lineTo","stroke","onmousemove","rect","getBoundingClientRect","clientX","left","width","clientY","top","height","id","className","Container","type","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oQAMMA,EAASC,MAgDAC,EA9CD,WACZ,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,mBAAS,CAAC,EAAG,IAA7C,mBAAOG,EAAP,KAAiBC,EAAjB,KAyCA,OAvCAC,qBAAU,WACR,IAAMC,EAASC,SAASC,eAAe,SACjCC,EAAMH,EAAOI,WAAW,MAC9BD,EAAIE,UAAY,OAChBF,EAAIG,SAAW,QACfH,EAAII,UAAY,EAChBP,EAAOQ,YAAc,SAACC,GACpBb,GAAa,GACbO,EAAIO,YACJnB,EAAOoB,KAAK,OAAQ,CAAEC,EAAGf,EAAS,GAAIgB,EAAGhB,EAAS,MAEpDG,EAAOc,UAAY,SAACL,GAClBb,GAAa,GACbL,EAAOoB,KAAK,KAAM,CAAEC,EAAGf,EAAS,GAAIgB,EAAGhB,EAAS,MAElDN,EAAOwB,GAAG,UAAU,YAAe,IAAZH,EAAW,EAAXA,EAAGC,EAAQ,EAARA,EACxBV,EAAIa,OAAOJ,EAAGC,GACdI,QAAQC,IAAI,aAEd3B,EAAOwB,GAAG,UAAU,YAAe,IAAZH,EAAW,EAAXA,EAAGC,EAAQ,EAARA,EACxBV,EAAIgB,OAAOP,EAAGC,GACdV,EAAIiB,YAENpB,EAAOqB,YAAc,SAACZ,GACpB,IAAIa,EAAOtB,EAAOuB,wBAClBzB,EAAY,EACRW,EAAEe,QAAUF,EAAKG,MAAQH,EAAKI,MAAS1B,EAAO0B,OAC9CjB,EAAEkB,QAAUL,EAAKM,KAAON,EAAKO,OAAU7B,EAAO6B,SAG9ClC,IACFJ,EAAOoB,KAAK,OAAQ,CAAEC,EAAGf,EAAS,GAAIgB,EAAGhB,EAAS,KAClDM,EAAIgB,OAAOtB,EAAS,GAAIA,EAAS,IACjCM,EAAIiB,cAMH,wBAAQU,GAAG,QAAQC,UAAU,W,MCjCvBC,MAbf,WACE,OACE,sBAAKD,UAAU,YAAf,UACE,qBAAKA,UAAU,yBAAf,SACE,uBAAOE,KAAK,YAEd,qBAAKF,UAAU,kBAAf,SACE,cAAC,EAAD,UCNOG,MAJf,WACE,OAAO,cAAC,EAAD,KCSMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7C,SAASC,eAAe,SAM1BiC,M","file":"static/js/main.76892782.chunk.js","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\n\nimport \"./style.css\";\n\nconst socket = io();\n\nconst Board = () => {\n  const [mouseDown, setMouseDown] = useState(false);\n  const [mousePos, setMousePos] = useState([0, 0]);\n\n  useEffect(() => {\n    const canvas = document.getElementById(\"board\");\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = \"blue\";\n    ctx.lineJoin = \"round\";\n    ctx.lineWidth = 2;\n    canvas.onmousedown = (e) => {\n      setMouseDown(true);\n      ctx.beginPath();\n      socket.emit(\"down\", { x: mousePos[0], y: mousePos[1] });\n    };\n    canvas.onmouseup = (e) => {\n      setMouseDown(false);\n      socket.emit(\"up\", { x: mousePos[0], y: mousePos[1] });\n    };\n    socket.on(\"onDown\", ({ x, y }) => {\n      ctx.moveTo(x, y);\n      console.log(\"onDown\");\n    });\n    socket.on(\"onDraw\", ({ x, y }) => {\n      ctx.lineTo(x, y);\n      ctx.stroke();\n    });\n    canvas.onmousemove = (e) => {\n      let rect = canvas.getBoundingClientRect();\n      setMousePos([\n        ((e.clientX - rect.left) / rect.width) * canvas.width,\n        ((e.clientY - rect.top) / rect.height) * canvas.height,\n      ]);\n\n      if (mouseDown) {\n        socket.emit(\"draw\", { x: mousePos[0], y: mousePos[1] });\n        ctx.lineTo(mousePos[0], mousePos[1]);\n        ctx.stroke();\n      } else {\n      }\n    };\n  });\n\n  return <canvas id=\"board\" className=\"board\"></canvas>;\n};\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"../board/Board\";\n\nimport \"./style.css\";\n\nfunction Container() {\n  return (\n    <div className=\"container\">\n      <div className=\"color-picker-container\">\n        <input type=\"color\" />\n      </div>\n      <div className=\"board-container\">\n        <Board></Board>\n      </div>\n    </div>\n  );\n}\n\nexport default Container;\n","import Container from \"./components/container/Container\";\n\nfunction App() {\n  return <Container />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}